Trong project này nói về:
    - Tạo và đăng ký route (src/main/java/com.example.demo/controller)
    - Thêm RequestBody vào khi gọi API (src/main/java/com.example.demo/controller), (src/main/java/com.example.demo/model)
    - ORM Map với Database (src/main/java/com.example.demo/entity)
    - Kết nối với Database MYSQL (src/main/resources/application.properties)
    - Sư dụng JPA để thao tác với Database (src/main/java/com.example.demo/repository)
        + Tạo interface kế thừa JpaRepository (JpaRepository<entity, id> trong đó entity là class entity, id là kiểu dữ liệu của id trong entity)
        + Tạo class implement interface trên 
        + Dùng các annotation như 
            @Bean (khai báo dùng để đánh dấu method là Bean), 
            @Component (khai báo dùng để đánh dấu class là Bean), 
            @Service (khai báo dùng để xử lý logic), 
            @Repository(khai báo dùng để query với Database) 
          để đăng ký Bean trong Spring Container, đưa lên IOC Container để quản lý, khi có yêu cầu sẽ từ IOC eject ra các class và sử dụng
        + Sử dụng @Autowired để inject Bean vào trong class (src/main/java/com.example.demo/controller), có thể dùng @Qualifier để chỉ định Bean cần inject
    - Sử dụng kỹ thuật DTO (Data Transfer Object) để truyền dữ liệu sang JSON (src/main/java/com.example.demo/dto, controller)
    Do trong entity có thể có những trường không cần thiết trả về cho client, nên ta tạo ra một class DTO để trả về cho client, class này chỉ có những trường cần thiết
    - Tạo các Custom JPA query (find(Count)(First, Top10)By(Username)(OrderBy)(Asc), findAllBy, ...) (src/main/java/com.example.demo/repository)
    - Tạo Implement để loại bỏ Dependency (src/main/java/com.example.demo/service/impl). Khi gọi hàm chỉ cần gọi interface, nó sẽ tự động gọi đến class implement interface đó
    - Tạo Payload để trả về cho client hoặc để client request lên server (src/main/java/com.example.demo/payload)
    - Tạo API đăng ký tài khoản (src/main/java/com.example.demo/controller) (src/main/java/com.example.demo/payload/request/SignUpRequest) (src/main/java/com.example.demo/service/impl/LoginServiceImpl) (src/main/java/com.example.demo/security/service/UserLoginService)
    - Dùng Spring Security để bảo vệ route, phân quyền (src/main/java/com.example.demo/security)
      + Custom FilterSecurity để bảo vệ route (src/main/java/com.example.demo/security/CustomerFilterSecurity)
      + Dùng Bcrypt để mã hóa password (src/main/java/com.example.demo/security/CustomerFilterSecurity)
      + SingIn và SignUp theo chuẩn mã hóa password Bcrypt (src/main/java/com.example.demo/service/UserLoginService)
      + Theo chuẩn BasicAuth (không cần dùng trang login, chỉ cần gửi username và password lên server để xác thực)
        ** Tạo UserDetailService mặc định đưa lên Memory theo BasicAuth (src/main/java/com.example.demo/security/CustomerFilterSecurity)
        ** Custom lại UserDetailService để lấy thông tin user từ Database (src/main/java/com.example.demo/security/CustomerFilterSecurity), (src/main/java/com.example.demo/security/service/CustomUserDetailService)
      + Dùng JWT để xác thực
        ** Viết đoạn code tạo 1 SecretKey rồi thêm vào application.properties, sau khi tạo xong, xóa code (src/main/java/com.example.demo/controller/AuthController)
        ** Tạo class JwtUtils để tạo JWT cho mỗi lần SignIn, trả về token (src/main/java/com.example.demo/utils/JwtUtils)